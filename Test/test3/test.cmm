//选课助手
char info[1000000];       //保存所有课程信息
int pass[1000];           //通过的课程
char preCourses[1000000]; //前置课程

int main()
{
	int i;
	int j;
	char end;
	char ch;
	int totalGPA;
	int trialCredits;
	int passCredits;
	int totalCredits;
	int index;
	int no;				// 根据|判断当前表示的类别
	int credit;			// 学分临时计算变量
	int preIndex;		// 前置课程索引
	int remainCredits;
	float GPA;
	int passNum;	 // 通过的课程数量
	char pre[10000];
	int suc[100];		// 每门课是否完成推荐

	int preJ;			// 前置课程数量
	int temp;			// 是否需要推荐前置课程
	int num;			// 总课程数量
	int courseIndex;
	i = 0;
  //读取参数
	while (1) {
		scan(end);
		if (end != '\n') {
			info[i * 1000] = end;
		}
		else {
			info[i * 1000] = '\0';
			break;
		}

		j = 1;
		while (1) {
			scan(ch);
			if (ch != '\n') {
				info[i * 1000 + j] = ch;
			}
			else {
				info[i * 1000 + j] = '\0';
				break;
			}
			j = j + 1;
		}
		i = i + 1;
	}

  //初始化分数
	totalGPA = 0;
	trialCredits = 0;
	passCredits = 0;
	totalCredits = 0;
	index = 0;

	while (index < i) {
		no = 0;
		credit = 0;
		preIndex = 0;
		pass[index] = 0;	// 是否通过该门课程

		j = 0;
		while (1) {
			if (info[index * 1000 + j] == '|') {
				no = no + 1;
			}
			// 根据|区分课程名、学分、前置课程、成绩
			if (no == 1) {
				credit = info[index * 1000 + j + 1] - '0';
				totalCredits = totalCredits + credit;
				j = j + 1;
			}
			if (no == 2) {
				if (info[index * 1000 + j + 1] == '|') {
					preCourses[index + 1000 + preIndex] = '\0';
				}
				else {
					preCourses[index * 1000 + preIndex] = info[index * 1000 + j + 1];
				}
				preIndex = preIndex + 1;
			}

			if (no == 3) {
        // 根据不同成绩计算GPA和学分
				ch = info[index * 1000 + j + 1];
				if (ch == 'A') {
					trialCredits = trialCredits + credit;
					passCredits = passCredits + credit;
					totalGPA = totalGPA + credit * 4;
					pass[index] = 1;
				}
				else if (ch == 'B') {
					trialCredits = trialCredits + credit;
					passCredits = passCredits + credit;
					totalGPA = totalGPA + credit * 3;
					pass[index] = 1;
				}
				else if (ch == 'C') {
					trialCredits = trialCredits + credit;
					passCredits = passCredits + credit;
					totalGPA = totalGPA + credit * 2;
					pass[index] = 1;
				}
				else if (ch == 'D') {
					trialCredits = trialCredits + credit;
					passCredits = passCredits + credit;
					totalGPA = totalGPA + credit * 1;
					pass[index] = 1;
				}
				else if (ch == 'F') {
					trialCredits = trialCredits + credit;
				}
				break;
			}
			j = j + 1;
		}
		index = index + 1;
	}

	remainCredits = totalCredits - passCredits;
	GPA = totalGPA;
	if (trialCredits != 0) {
		GPA = GPA / trialCredits;
	}

	printf("GPA: %.1lf", GPA);
	print("");
	printf("Hours Attempted: %d", trialCredits);
	print("");
	printf("Hours Completed: %d", passCredits);
	print("");
	printf("Credits Remaining: %d", remainCredits);
	print("");
	print("");
	printf("Possible Courses to Take Next");
	print("");

	index = 0;

	while (index < i) {
		// 先处理已挂科的课程
		if (pass[index] == 0) {
			if (preCourses[index * 1000] == '\0') {
				printf("  ");
				j = 0;
				while (1) {
					if (info[index * 1000 + j] != '|') {
						printf("%c", info[index * 1000 + j]);
					}
					else {
						print("");
						break;
					}
					j = j + 1;
				}
			}
			// 若该科目存在前置课程
			else {
				j = 0;
				while (1) {
					preIndex = 0;
					preJ = 0;
					temp = 1;
					// 根据“与”“或”条件进行分类处理
					while (1) {
						// 单个前置课程
						if (preCourses[index * 1000 + j] != ',' && preCourses[index * 1000 + j] != ';' && preCourses[index * 1000 + j] != '\0') {
							pre[preIndex * 100 + preJ] = preCourses[index * 1000 + j];
							preJ = preJ + 1;
						}
						// 与条件课程
						else if (preCourses[index * 1000 + j] == ',') {
							pre[preIndex * 100 + preJ] = '\0';
							preIndex = preIndex + 1;
							preJ = 0;
						}
						// 或条件课程
						else if (preCourses[index * 1000 + j] == ';' || preCourses[index * 1000 + j] == '\0') {
							pre[preIndex * 100 + preJ] = '\0';
							num = preIndex + 1;
							preIndex = 0;
							while (preIndex < num) {
								suc[preIndex] = 0;
								courseIndex = 0;
								while (courseIndex < i) {
									// 前置课程得到学分
									if (pass[courseIndex] == 1) {
										preJ = 0;

										while (1) {
											// 找出或条件中合适的课程
											if (pre[preIndex * 100 + preJ] == info[courseIndex * 1000 + preJ]) {
												preJ = preJ + 1;
											}
											else {
												suc[preIndex] = 0;
												break;
											}
											// 到达最后，完成读入
											if (pre[preIndex * 100 + preJ] == '\0') {
												suc[preIndex] = 1;
												break;
											}
										}
									}
									// 判定完成后跳出
									if (suc[preIndex] == 1) {
										break;
									}
									courseIndex = courseIndex + 1;
								}
								preIndex = preIndex + 1;
							}
							// 判断是否有需要推荐的前置课程
							preIndex = 0;
							while (preIndex < num) {
								if (suc[preIndex] == 0) {
									temp = 0;
								}

								preIndex = preIndex + 1;
							}
							// 推荐相应的前置课程
							if (temp == 1) {
								printf("  ");
								j = 0;
								while (1) {
									if (info[index * 1000 + j] != '|') {
										printf("%c", info[index * 1000 + j]);
									}
									else {
										print("");
										break;
									}
									j = j + 1;
								}
								break;
							}
							else {
								break;
							}
						}
						j = j + 1;
					}
					// 判断是否对该课程所有前置课程完成推荐
					if (preCourses[index * 1000 + j] == '\0') {
						break;
					}
					else {
						j = j + 1;
					}
					// 都已完成，直接进入下一门课程的判断
					if (temp == 1) {
						break;
					}
				}
			}

		}
		else {
			passNum = passNum + 1;
		}

		index = index + 1;
	}
	if (passNum == i) {
		printf("  None - Congratulations!");
		print("");
	}
	return 0;
}


